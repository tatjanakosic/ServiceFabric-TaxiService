{"ast":null,"code":"import axios from 'axios';\nconst RideService = {\n  orderRide: async rideData => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.post(`${process.env.REACT_APP_RIDE}/orderRide`, rideData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error ordering ride:', error);\n      throw error;\n    }\n  },\n  confirmRide: async rideDetails => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.post(`${process.env.REACT_APP_RIDE}/confirmRide`, rideDetails, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error confirming ride:', error);\n      throw error;\n    }\n  },\n  getAdminRideHistory: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/adminRideHistory`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      throw error;\n    }\n  },\n  getDriverRideHistory: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/driverRideHistory`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      throw error;\n    }\n  },\n  getRideHistory: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/rideHistory`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      throw error;\n    }\n  },\n  getAvailableRides: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/availableRides`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching available rides:', error);\n      throw error;\n    }\n  },\n  acceptRide: async rideId => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.get(`${process.env.REACT_APP_RIDE}/acceptRide/${rideId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error accepting ride:', error);\n      throw error;\n    }\n  }\n};\nexport default RideService;","map":{"version":3,"names":["axios","RideService","orderRide","rideData","token","localStorage","getItem","Error","response","post","process","env","REACT_APP_RIDE","headers","Authorization","error","console","confirmRide","rideDetails","getAdminRideHistory","put","data","getDriverRideHistory","getRideHistory","getAvailableRides","acceptRide","rideId","get"],"sources":["C:/Users/nikol/Desktop/MojVeb/src/Services/RideService.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst RideService = {\n  orderRide: async (rideData) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.post(`${process.env.REACT_APP_RIDE}/orderRide`, rideData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      console.error('Error ordering ride:', error);\n      throw error;\n    }\n  },\n\n  confirmRide: async (rideDetails) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.post(`${process.env.REACT_APP_RIDE}/confirmRide`, rideDetails, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      console.error('Error confirming ride:', error);\n      throw error;\n    }\n  },\n\n    getAdminRideHistory: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/adminRideHistory`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      throw error;\n    }\n  },\n\n  getDriverRideHistory: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/driverRideHistory`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      throw error;\n    }\n  },\n\n    getRideHistory: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/rideHistory`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      throw error;\n    }\n  },\n\n  getAvailableRides: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.put(`${process.env.REACT_APP_RIDE}/availableRides`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching available rides:', error);\n      throw error;\n    }\n  },\n\n  acceptRide: async (rideId) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await axios.get(`${process.env.REACT_APP_RIDE}/acceptRide/${rideId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error accepting ride:', error);\n      throw error;\n    }\n  },\n};\n\nexport default RideService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}